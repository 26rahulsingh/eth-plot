/* GENERATED BY TYPECHAIN VER. 0.2.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime";

export class EthGrid2 extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "balances",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "ownership",
        outputs: [
          { name: "owner", type: "address" },
          { name: "x", type: "uint16" },
          { name: "y", type: "uint16" },
          { name: "w", type: "uint16" },
          { name: "h", type: "uint16" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "feeInThousandsOfPercent",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "tokenIdToAuction",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "data",
        outputs: [
          { name: "ipfsHash", type: "bytes" },
          { name: "url", type: "string" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "admin",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        payable: true,
        stateMutability: "payable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "tokenId", type: "uint256" },
          { indexed: false, name: "newPriceInGweiPerPixel", type: "uint256" },
          { indexed: false, name: "newPurchase", type: "bool" },
          { indexed: true, name: "owner", type: "address" }
        ],
        name: "AuctionUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "newZoneId", type: "uint256" },
          { indexed: false, name: "totalPrice", type: "uint256" },
          { indexed: true, name: "buyer", type: "address" }
        ],
        name: "PlotPurchased",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "price", type: "uint256" }],
        name: "PurchasePrice",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "zoneIndex", type: "uint256" },
          { name: "pricePerPixelInGwei", type: "uint256" }
        ],
        name: "createAuction",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "zoneIndex", type: "uint256" }],
        name: "getPlot",
        outputs: [
          { name: "", type: "uint16" },
          { name: "", type: "uint16" },
          { name: "", type: "uint16" },
          { name: "", type: "uint16" },
          { name: "", type: "address" },
          { name: "", type: "uint256" },
          { name: "", type: "string" },
          { name: "", type: "bytes" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "ownershipLength",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "zoneIndex", type: "uint256" },
          { name: "newPriceInGweiPerPixel", type: "uint256" },
          { name: "newPurchase", type: "bool" }
        ],
        name: "updateAuction",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "purchase", type: "uint16[]" },
          { name: "purchasedAreas", type: "uint16[]" },
          { name: "areaIndices", type: "uint256[]" },
          { name: "ipfsHash", type: "bytes" },
          { name: "url", type: "string" },
          { name: "initialPurchasePrice", type: "uint256" }
        ],
        name: "purchaseAreaWithData",
        outputs: [{ name: "", type: "uint256" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<EthGrid2> {
    const contract = new EthGrid2(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get feeInThousandsOfPercent(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.feeInThousandsOfPercent, []);
  }
  public get admin(): Promise<string> {
    return promisify(this.rawWeb3Contract.admin, []);
  }
  public get ownershipLength(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.ownershipLength, []);
  }
  public balances(arg0: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.balances, [arg0.toString()]);
  }
  public ownership(
    arg0: BigNumber | number
  ): Promise<[string, BigNumber, BigNumber, BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.ownership, [arg0.toString()]);
  }
  public tokenIdToAuction(arg0: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.tokenIdToAuction, [arg0.toString()]);
  }
  public data(arg0: BigNumber | number): Promise<[string, string]> {
    return promisify(this.rawWeb3Contract.data, [arg0.toString()]);
  }
  public getPlot(
    zoneIndex: BigNumber | number
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      string
    ]
  > {
    return promisify(this.rawWeb3Contract.getPlot, [zoneIndex.toString()]);
  }

  public createAuctionTx(
    zoneIndex: BigNumber | number,
    pricePerPixelInGwei: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "createAuction", [
      zoneIndex.toString(),
      pricePerPixelInGwei.toString()
    ]);
  }
  public updateAuctionTx(
    zoneIndex: BigNumber | number,
    newPriceInGweiPerPixel: BigNumber | number,
    newPurchase: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "updateAuction", [
      zoneIndex.toString(),
      newPriceInGweiPerPixel.toString(),
      newPurchase.toString()
    ]);
  }
  public purchaseAreaWithDataTx(
    purchase: BigNumber[],
    purchasedAreas: BigNumber[],
    areaIndices: BigNumber[],
    ipfsHash: string,
    url: string,
    initialPurchasePrice: BigNumber | number
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "purchaseAreaWithData",
      [
        purchase.map(val => val.toString()),
        purchasedAreas.map(val => val.toString()),
        areaIndices.map(val => val.toString()),
        ipfsHash,
        url,
        initialPurchasePrice.toString()
      ]
    );
  }

  public AuctionUpdatedEvent(eventFilter: {
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    {
      tokenId: BigNumber | number;
      newPriceInGweiPerPixel: BigNumber | number;
      newPurchase: boolean;
      owner: BigNumber | string;
    },
    { owner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      {
        tokenId: BigNumber | number;
        newPriceInGweiPerPixel: BigNumber | number;
        newPurchase: boolean;
        owner: BigNumber | string;
      },
      { owner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "AuctionUpdated", eventFilter);
  }
  public PlotPurchasedEvent(eventFilter: {
    buyer?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    {
      newZoneId: BigNumber | number;
      totalPrice: BigNumber | number;
      buyer: BigNumber | string;
    },
    { buyer?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      {
        newZoneId: BigNumber | number;
        totalPrice: BigNumber | number;
        buyer: BigNumber | string;
      },
      { buyer?: BigNumber | string | Array<BigNumber | string> }
    >(this, "PlotPurchased", eventFilter);
  }
  public PurchasePriceEvent(eventFilter: {}): DeferredEventWrapper<
    { price: BigNumber | number },
    {}
  > {
    return new DeferredEventWrapper<{ price: BigNumber | number }, {}>(
      this,
      "PurchasePrice",
      eventFilter
    );
  }
}

export namespace EthGrid2EventTypes {
  export type AuctionUpdatedEventArgs = {
    tokenId: BigNumber | number;
    newPriceInGweiPerPixel: BigNumber | number;
    newPurchase: boolean;
    owner: BigNumber | string;
  };

  export type PlotPurchasedEventArgs = {
    newZoneId: BigNumber | number;
    totalPrice: BigNumber | number;
    buyer: BigNumber | string;
  };

  export type PurchasePriceEventArgs = { price: BigNumber | number };
}
